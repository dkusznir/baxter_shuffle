Random location generator for Baxter shuffle - notes

Overview: Baxter's shuffle routine needs random x-y locations where he can put objects after he picks them up. There are two constraints on admissiable locations:
Requirement 1: the location can't be out of Baxter's reach
Requirement 2: the location can't be where another object is already located.

The root Python function will be random(), which generates a pseudo-random float on the semi-open interval [0.0,1.0). Calling this function twice will yield a pseudo-random pair of numbers in [0.0, 1.0). This pair will have to be scaled to Baxter's workspace.

Idea 1: design a scaling algorithm that ensures all scaled points are within Baxter's reachable workspace.

If Idea 1 (above) is implemented, then Requirement 1 vanishes since it will be satisfied for all scaled pseudo-random points. Otherwise if Idea 1 is not implemented, I think checking whether a new random location meets Requirement 2 will be easier than checking whether it meets Requirement 1.

How to check with Requirement 2?
	Keep track of each block's current location in a fixed-size array (one dimension of which will be the number of blocks Baxter is manipulating).
	The array being full implies all the blocks are on the table, in random locations.
	For example, with 3 blocks in the shuffle, the array could look like this:
		Block number 	X-location 		Y-location
		1				1.0				2.0
		2				2.0				1.0
		3				0.5				1.5

	Baxter can shuffle "blindly" or "not blindly" (I don't know what to call it):
		Shuffling "blindly":
			When Baxter generates a new acceptable random location for a block, he puts the block he is currently holding at that location and just updates the oldest entry in the array. In this method, Block Number does not denote a specific block (for example, a green block or a red block), only the order in which the blocks have been moved.
			THIS METHOD WON'T WORK
		Shuffling "not blindly":
			Baxter needs to know some information about the block he's currently holding: he needs to know where it came from.



Shuffle algorithm:

0:	START
	Initialize array: if there are i blocks on the start row, the array will be i x 2 (for x-y coordinates)
1:	Grab block from start row
2:	Generate random location on table (within reachable workspace)
3:	Q: Is the candidate location too close to any other objects (within a certain radius)?
		for i = 1:length(array)
			Compute 2-norm between candidate point and (x(i), y(i)) pair.
	A:	Yes
		Go back to 2 (generate random location)
	A: 	No
		Continue to 4
4:	Put block down at the location
5:	Update the array
	There is a block at (x,y)