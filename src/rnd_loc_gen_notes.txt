Random location generator for Baxter shuffle - notes

Overview: Baxter's shuffle routine needs random x-y locations where he can put objects after he picks them up. There are two constraints on admissiable locations:
Requirement 1: the location can't be out of Baxter's reach
Requirement 2: the location can't be where another object is already located.

The root Python function will be random(), which generates a pseudo-random float on the semi-open interval [0.0,1.0). Calling this function twice will yield a pseudo-random pair of numbers in [0.0, 1.0). This pair will have to be mapped to Baxter's workspace.

Idea 1: design a mapping algorithm that ensures all mapped points are within Baxter's reachable workspace.
	Task: Figure out what is Baxter's reachable workspace? It will be the overlap of the reachable workspace of the left and right arms, and it might look like a Venn diagram.
	Potential problem: the Venn diagram of reachable points is either too small or too large.
		If it's too large, hopefully it will encompass the table, in which case all points on the table are reachable.
		If it's too small (what does that mean?),???
	If it isn't possible to design a mapping algorithm that ensures all mapped points are within Baxter's reachable workspace, we will have to mathematically describe the reachable workspace, perhaps a 2D projection of the 3D reachable space onto the table. That projection could be "rounded down" to a circle or square of specified dimensions.

If Idea 1 (above) is implemented, then Requirement 1 vanishes since it will be satisfied for all scaled pseudo-random points. Otherwise if Idea 1 is not implemented, I think checking whether a new random location meets Requirement 2 will be easier than checking whether it meets Requirement 1.

How to check with Requirement 2?
	Keep track of each block's current location in a fixed-size array (one dimension of which will be the number of blocks Baxter is manipulating).
	The array being full implies all the blocks are on the table, in random locations.
	For example, with 3 blocks in the shuffle, the array could look like this:
		Block number 	X-location 		Y-location
		1				1.0				2.0
		2				2.0				1.0
		3				0.5				1.5



Shuffle algorithm:

Unload blocks from start row to random locations on table:
0:	START
	Initialize array: if there are j_max blocks on the start row, the array will be j_max x 2 (for x-y coordinates)

For j=1:j_max {
	1:	Grab block j from start row
	2:	Generate random location [x_cand,y_cand] on table (within reachable workspace)
	3:	Q: Is the candidate location too close to any other objects (within a certain radius)?
			for i = 1:length(array)
				Compute 2-norm between candidate point and [x(i), y(i)] pair.
				if 2-norm < tolerance
					"too close"=Yes
				else
					"too close"=No
				end (if)
			end (for)

		A:	If "too close"==Yes
				Go back to 2 (generate random location)
		 	Else
				Continue to 4
			end (if)
	4:	Put block down at the location
	5:	Update the array
		[x(j),y(j)] = [x_cand,y_cand]
end (for)
}


# Shuffle blocks randomly around on the table, Method 1 (there are multiple methods):
# Shuffle Method 1 shuffles 'sequentially':
# It cycles through the j blocks and randomly repositions them one at a time.
# It 

While (shuffle_counter < shuff_counter_max) {
	For j=1:j_max	
		1:	Grab block j
			(move end-effector to [x(j),y(j)] and grasp, then pull up to specified height).
		2:	Generate random location [x_cand, y_cand] on table (within reachable workspace)
		3:	Q: Is the candidate location too close to any other objects (within a certain radius)?
				for i = 1:length(array)
					Compute 2-norm between candidate point and [x(i), y(i)] pair.
					if 2-norm < tolerance
						"too close"=Yes
					else
						"too close"=No
					end (if)
				end (for)

			A:	If "too close"==Yes
					Go back to 2 (generate random location)
			 	Else
					Continue to 4
				end (if)
		4:	Put block down at the location
		5:	Update the array
			[x(j),y(j)] = [x_cand,y_cand]
	end (for)
	shuffle_counter++	#	increment shuffle counter
end (while)
}

# Shuffle Method 2:
# Grab the closest (closest to Baxter's torso or something) block and randomly reposition it.
# How to detect the closest block?
#	Visually
#		I don't know how this would work yet. Maybe like this:
#			1:	Visually locate all j_max blocks
#			2:	Compute Euclidean distance from each block to some point on Baxter's body
#			3:	Grab the block that corresponds to the minimum Euclidean distance.
#	Use array of block locations
#		For j=1:j_max
#			distance = sqrt((x(j) - x_baxter)**2 + (y(j) - y_baxter)**2)
#		end (for)
#		[closest_distance, closest_index] = min(distance)

While (shuffle_counter < shuff_counter_max) {
	#	Find closest block:
	For j=1:j_max
		distance = sqrt((x(j) - x_baxter)**2 + (y(j) - y_baxter)**2)
	end (for)
	[closest_distance, closest_index] = min(distance)

	1:	Grab block closest_index
		(move end-effector to [x(closest_index),y(closest_index)] and grasp, then pull up to specified height).
	2:	Generate random location [x_cand, y_cand] on table (within reachable workspace)
	3:	Q: Is the candidate location too close to any other objects (within a certain radius)?
			for i = 1:length(array)
				Compute 2-norm between candidate point and [x(i), y(i)] pair.
				if 2-norm < tolerance
					"too close"=Yes
				else
					"too close"=No
				end (if)
			end (for)
			A:	If "too close"==Yes
				Go back to 2 (generate random location)
		 	Else
				Continue to 4
			end (if)
	4:	Put block down at the location
	5:	Update the array
		[x(j),y(j)] = [x_cand,y_cand]
	shuffle_counter++	#	increment shuffe counter
end (while)
}

I think Method 1 of shuffling is easier to implement because it doesn't require an additional calculation to find the nearest block; it just uses the known positions of the blocks.

Note: the following lines of (pseudo)code could easily exist as a separate function:
2:	Generate random location [x_cand, y_cand] on table (within reachable workspace)
3:	Q: Is the candidate location too close to any other objects (within a certain radius)?
		for i = 1:length(array)
			Compute 2-norm between candidate point and [x(i), y(i)] pair.
			if 2-norm < tolerance
				"too close"=Yes
			else
				"too close"=No
			end (if)
		end (for)
		A:	If "too close"==Yes
			Go back to 2 (generate random location)
	 	Else
			Continue to 4
		end (if)

As a separate function, the code above could look like this:

def xy_rand(array,tolerance):
	too_close = 1; # initialize flag
	while(too_close):
		x = random();
		y = random();
		[x_cand,y_cand]= mapping_function(x,y); # maps a pair of [0,1) numbers to the reachable workspace
		for i = 1:size(array,1)
			distance(i) = sqrt((x_cand - x(i))**2 + (y_cand - y(i))**2)
		end (for)
		if (distance(1) > tolerance && distance(2) > tolerance && distance(3) > tolerance)
			too_close = 1
		else
			too_close = 0
		end (if)
	end (while)
	return [x_cand, y_cand]
end (function)